plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.4.4"
	id "dev.kikugie.j52j" version "2.0"
}

archivesBaseName = property('mod.name')
version = "${property('mod.version')}+${stonecutter.current.version}"
group = property('mod.maven_group')

base {
	archivesName = archivesBaseName
}

def mcVersion = stonecutter.current.version

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url 'https://maven.enjarai.dev/releases' }
	maven { url 'https://maven.enjarai.nl/mirrors' }

	// Polymer and other server-side utils
	maven { url 'https://maven.nucleoid.xyz' }

	// Permissions API
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${stonecutter.current.version}"
	mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric_loader')}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"

	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
	modImplementation include("eu.pb4:polymer-core:${property('deps.polymer')}")
	modImplementation include("eu.pb4:polymer-virtual-entity:${property('deps.polymer')}")
	modImplementation include("xyz.nucleoid:server-translations-api:${property('deps.server_translations_api')}")
	include(modImplementation("me.lucko:fabric-permissions-api:${property('deps.permissions_api')}"))
}

def target = ">=${project.property('mod.min_target')}- <=${project.property('mod.max_target')}"

processResources {
    filesMatching("fabric.mod.json") {
        expand 'mod_version': version, 'target_minecraft': target
    }

    def resultKey = "item"

    if (stonecutter.compare(mcVersion, "1.21") >= 0) {
        resultKey = "id"
        eachFile { fileCopyDetails ->
            if (fileCopyDetails.path.startsWith('data/restart_detector/loot_tables')) {
                fileCopyDetails.path = fileCopyDetails.path.replace('data/restart_detector/loot_tables', 'data/restart_detector/loot_table')
            }

            if (fileCopyDetails.path.startsWith('data/restart_detector/recipes')) {
                fileCopyDetails.path = fileCopyDetails.path.replace('data/restart_detector/recipes', 'data/restart_detector/recipe')
            }
        }
        includeEmptyDirs = false
    }

    filesMatching("**/*detector.json") { expand "resultKey": resultKey }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

// Create a task to collect the completed jars in the root project's build/libs folder.
def collectJars = tasks.register("collectJars", Copy) {copy ->

	def task = tasks.getByName("remapJar")

	dependsOn(task)

	copy.from task
	copy.into rootProject.buildDir.path + "/libs"
}

// Set up assemble to depend on the collectJars task, so it gets run on build.
assemble {
	dependsOn(collectJars)
}

loom.runConfigs.server.ideConfigGenerated = true
loom.runConfigs.client.ideConfigGenerated = true

publishMods {
	file = remapJar.archiveFile
	displayName = "${project.property('mod.version')} for ${stonecutter.current.version}"
	version = project.version
	changelog = getRootProject().file("CHANGELOG.md").text
	type = STABLE
	modLoaders.add("fabric")

	dryRun = !providers.gradleProperty('enjaraiModrinthToken').present || !providers.gradleProperty('enjaraiGithubToken').present

	if (providers.gradleProperty('enjaraiModrinthToken').present) {
		modrinth {
			projectId = "ZCH3dl0z"
			accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

			def min = project.property('mod.min_target')
			def max = project.property('mod.max_target')

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "fabric-api"
			}
			embeds {
				slug = "polymer"
			}
		}
	}

	if (providers.gradleProperty('enjaraiGithubToken').present) {
		github {
			repository = project.property('mod.repository')
			accessToken = providers.gradleProperty('enjaraiGithubToken').get()
			commitish = "master"
			tagName = project.version
		}
	}
}
